@import url("https://fonts.googleapis.com/css2?family=Klee+One&display=swap");
@import url("https://fonts.googleapis.com/css2?family=Klee+One:wght@600&text=0123456789&display=swap");
@import "../css/var";

@media print {
	body {
		background: none;
	}
	main {
		inline-size: initial;
	}
}

// 印刷
@page {
	size: A4 landscape;
	margin-block-start: 20mm;
}
body.firefox {
	@page:first {
		margin-block-start: 0;
	}
}


#gradeOpts {
	display: flex;
	flex-wrap: wrap;
	justify-content: center;
	column-gap: 2em;
	label {
		font-size: 1.5rem;
		input {
			inline-size: 1.2rem;
			block-size: 1.2rem;
			margin-inline-end: 4px;
		}
	}
}
body.safari #gradeOpts label input {
	inline-size: 1.5rem;
	block-size: 1.5rem;
	vertical-align: -0.5em;
}

.tabContents .tabWrapper {
	margin-block: 16px;
	&#selectTab {
		details {
			margin-block-end: 16px;
		}
		summary {
			margin-block: 16px;
			h2 {
				display: inline-block;
				margin-block: 0;
				margin-inline-start: 0.5em;
			}
		}
	}
}

#selectRandomlyBtn {
	margin-block: 16px;
	#randomQNum {
		inline-size: 2.5em;
		font-size: inherit;
		font-family: $sansSerif;
		color: inherit;
		text-align: center;
		vertical-align: 1px;
		background-color: rgba(white, 0.5);
		padding-inline: 4px;
		margin-inline: 4px;
		border: none;
		border-radius: pxToRem(4);
		appearance: textfield;
		&::-webkit-outer-spin-button,
		&::-webkit-inner-spin-button {
			-webkit-appearance: none;
			margin: 0;
		}
	}
}

.kanjiChoicesDiv {
	display: flex;
	flex-wrap: wrap;
	& > label {
		padding-block: 8px 6px;
		padding-inline: 16px;
		border-radius: 8px;
		margin-inline-end: 8px;
		margin-block-end: 8px;
		user-select: none;
		-webkit-user-select: none;
		&.checked {
			background: white;
			color: $textColor;
		}
		&:not(.checked) {
			background: rgba(white, .3);
			color: rgba($textColor, .5);
		}
		&:focus-within {
			outline: auto;
		}
	}
}

#panel {
	inline-size: 100vw;
	position: fixed;
	inset-block-end: 0;
	inset-inline-start: 0;
	z-index: 1;
	background: rgba($bgColor, .9);
	padding-inline: 20px;
	padding-block-end: 16px;
	text-align: center;
}

$annotationWidth: pxToRem(16);
$sideWidth: pxToRem(20);
$blankWidth: pxToRem(56);
$gap: pxToRem(4);
$counterHeight: pxToRem(32);
#quizPrint {
	font-family: $textbookTypeface;
	font-weight: 400;
	background: white;
	margin-block: 16px;
	padding: pxToRem(32);
	counter-reset: questions;
	--scale: 1;
	@media screen {
		inline-size: pxToRem(1123);
		transform: scale(var(--scale));
		transform-origin: top left;
	}
	@media print {
		padding-block: 0;
		margin-block-end: 0;
	}
	#quizHeader {
		$titleSize: 40;
		display: grid;
		grid-template-columns: pxToRem(8 * $titleSize) 1fr pxToRem(200);
		border: pxToRem(1) solid $textColor;
		border-radius: pxToRem(16);
		#quizTitle {
			font-size: pxToRem($titleSize);
			margin-block-end: pxToRem(4);
		}
		#nameField {
			display: flex;
			align-items: center;
			span {
				writing-mode: vertical-rl;
			}
		}
		#score {
			padding-block-end: pxToRem(8);
			padding-inline-end: pxToRem(24);
			display: grid;
			place-items: end;
			#maxScore::before {
				content: "/";
				margin-inline-end: 0.5em;
			}
		}
		#quizTitle, #nameField {
			padding-inline-start: pxToRem(24);
		}
		#nameField, #score {
			border-inline-start: pxToRem(1) solid $textColor;
		}
	}
	#dash {
		margin-inline-end: 0.2em;
	}
	#qRows {
		padding-block-start: pxToRem(16);
		.qRow {
			display: grid;
			grid-template-columns: repeat(8, $annotationWidth + $gap + $sideWidth + $gap + $blankWidth);
			block-size: $counterHeight + $gap + $gap + $blankWidth + $gap + 5.5rem;
			justify-content: space-between;
			break-inside: avoid;
			margin-block-start: pxToRem(32);
			box-sizing: content-box;
			&:first-of-type {
				margin-block-start: 0;
			}
		}
	}
}
[dir=rtl] {
	#quizPrint {
		@media screen {
			transform-origin: top right;
		}
	}
	#maxScore::before {
		content: "\\" !important;
	}
}
@media print {
	body.safari {
		#quizPrint {
			padding-block-start: pxToRem(32);
			margin-block-end: 0;
		}
		.qRow {
			&:nth-of-type(3n) {
				padding-block-start: 10mm;
			}
		}
	}
}

.question {
	writing-mode: vertical-rl;
	direction: ltr !important;
	block-size: 100%;
	display: grid;
	grid-template:
		". annotation" $annotationWidth
		". side" $sideWidth
		"counter blank" $blankWidth;
	grid-template-columns: $counterHeight 1fr;
	gap: $gap;
	line-height: 1;
	.counter {
		grid-area: counter;
		margin: auto;
		&::after {
			writing-mode: horizontal-tb;
			$circleWidth: pxToRem(24);
			counter-increment: questions;
			content: counter(questions);
			display: block;
			block-size: fit-content;
			min-block-size: $circleWidth;
			inline-size: $circleWidth;
			font-size: 0.7rem;
			font-weight: 600;
			line-height: $circleWidth - pxToRem(1);
			text-align: center;
			border: pxToRem(1) solid $textColor;
			border-radius: 50%;
			padding-inline: 0.2em;
		}
	}
	.annotation {
		grid-area: annotation;
		font-size: 0.7rem;
		text-align: end;
	}
	.answer {
		display: block;
		font-size: 2rem;
		line-height: $blankWidth;
		text-align: center;
	}
	.ruby {
		position: relative;
		&::after {
			content: attr(data-ruby);
			position: absolute;
			font-size: 0.5rem;
			text-align: center;
			inline-size: 300%;
			inset-inline-start: calc(pxToRem(1) - 100%);
		}
	}
	&.okurigana {
		.phrase {
			grid-area: side;
			.reading {
				display: inline-block;
				position: relative;
				white-space: nowrap;
				&::after {
					content: "";
					position: absolute;
					inset-inline-start: 0;
					inset-block-start: pxToRem(-4);
					inline-size: 100%;
					border-block-start: pxToRem(1) solid $textColor;
				}
			}
			.ruby::after {
				inset-block-start: pxToRem(-5);
			}
		}
		.blank {
			grid-area: blank;
			block-size: 100%;
			inline-size: 100%;
			position: relative;
			&::before, &::after {
				content: "";
				position: absolute;
				inset-block-start: 0;
				block-size: calc(100% - pxToRem(2));
				inline-size: pxToRem(8);
				border: pxToRem(1) solid $textColor;
			}
			&::before {
				inset-inline-start: 0;
				border-inline-end: none;
			}
			&::after {
				inset-inline-end: 0;
				border-inline-start: none;
			}
			.answer.long {
				font-size: 1.5rem;
			}
		}
	}
	&.tango .phrase {
		grid-area: blank;
		.main {
			display: inline-block;
			position: relative;
			&.unique {
				.blank {
					margin-inline: $gap;
				}
				&.firstNode .blank.firstNode {
					margin-inline-start: 0;
				}
				.reading {
					padding-inline: pxToRem(4);
					text-align-last: justify;
					&.short {
						padding-inline: pxToRem(16);
					}
					&.long1 {
						padding-inline: pxToRem(8);
					}
					&.long2 {
						padding-inline: 0;
						text-align-last: center;
					}
				}
			}
			&:not(.unique) {
				margin-inline: $gap;
				&.firstNode {
					margin-inline-start: 0;
				}
			}
			.blank {
				display: inline-block;
				block-size: $blankWidth;
				inline-size: $blankWidth;
				border: pxToRem(1) solid $textColor;
				.answer {
					block-size: $blankWidth - pxToRem(2);
				}
			}
			.reading {
				position: absolute;
				inline-size: 100%;
				inset-inline-start: 0;
				inset-block-start: pxToRem(-6) - 1rem;
				text-align: center;
				&.long {
					inset-inline-start: $blankWidth * -0.25;
					inline-size: $blankWidth * 1.5;
				}
			}
		}
		.ruby::after {
			inset-block-start: pxToRem(-6);
		}
	}
}
body.firefox {
	.question {
		&.okurigana .phrase {
			.reading {
				padding-block-start: 0;
			}
			.ruby::after {
				inset-block-start: pxToRem(-9);
			}
		}
		&.tango .phrase .ruby::after {
			inset-block-start: pxToRem(-9);
		}
	}
}
body.safari {
	.question {
		&.okurigana .phrase .ruby::after {
			inset-block-start: pxToRem(-12);
		}
		&.tango .phrase .ruby::after {
			inset-block-start: $blankWidth / 2;
		}
	}
}